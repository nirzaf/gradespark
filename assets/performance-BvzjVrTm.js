const c=()=>{try{if("PerformanceObserver"in window){new PerformanceObserver(t=>{const r=t.getEntries(),s=r[r.length-1];console.log("LCP:",s.startTime.toFixed(2)+"ms")}).observe({entryTypes:["largest-contentful-paint"]}),new PerformanceObserver(t=>{for(const r of t.getEntries())console.log("FID:",r.processingStart-r.startTime+"ms")}).observe({entryTypes:["first-input"]});let o=0;new PerformanceObserver(t=>{for(const r of t.getEntries())r.hadRecentInput||(o+=r.value);console.log("CLS:",o.toFixed(4))}).observe({entryTypes:["layout-shift"]})}}catch(e){console.error("Error tracking web vitals:",e)}},a=()=>{try{if("memory"in performance){const{usedJSHeapSize:e,totalJSHeapSize:n}=performance.memory;return{used:Math.round(e/1048576),total:Math.round(n/1048576)}}}catch(e){console.error("Error getting memory usage:",e)}return null},i=()=>{try{if("PerformanceObserver"in window){const e=new PerformanceObserver(n=>{for(const o of n.getEntries())o.duration>50&&console.warn("Long Task detected:",{duration:`${o.duration.toFixed(2)}ms`,startTime:o.startTime,name:o.name})});return e.observe({entryTypes:["longtask"]}),e}}catch(e){console.error("Error observing long tasks:",e)}return null},m=()=>{c(),i(),setInterval(()=>{const e=a();e&&console.log("Memory Usage:",e)},3e4)};export{a as getMemoryUsage,m as initPerformanceMonitoring,i as observeLongTasks,c as trackWebVitals};
